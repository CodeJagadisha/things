#!/bin/bash
# Quick and dirty s2disk wrapper.

einfo() { printf ">>> $@\n"; }

### Before suspend
sync
# Get current governor, save it and switch to performance.
if command -v cpufreq-info > /dev/null 2>&1 && command -v  cpufreq-set > /dev/null 2>&1; then
	einfo "Setting CPU Governor to performance ..."
	governor=$(cpufreq-info -p | cut -d ' ' -f 3)
	cpufreq-set -r -g performance
fi
# Disconnect wifi connectins.
if command -v wicd-cli > /dev/null 2>&1; then
	einfo "Disconnecting wifi ..."
	wicd-cli --wireless --disconnect > /dev/null
	while true; do
		if ! wicd-cli --wireless --network-details >/dev/null 2>&1; then
			break
		else
			sleep 1
		fi
	done
fi

if pidof dhcpcd >/dev/null; then
	einfo "Closing dhcpcd process."
	pkill dhcpcd
fi

# Drop zram devices before we suspend.
declare -A zram_swaps_prio
while read -r device _ _ _ prio; do
	case "${device}" in
		/dev/zram[0-9]*)
			einfo "Disabling swap on '${device##*/}' ..."
			zram_swap='true'
			zram_swaps_prio[${device}]="${prio}"
			swapoff "${device}"
			echo 1 >"/sys/block/${device##*/}/reset"
		;;
	esac

	# /proc/swaps change after swapoff so we need to use subshell can cat instead of simple </proc/swaps
done < <(cat /proc/swaps)
unset device prio

# Save APM level so we can restore it after resume.
if command -v hdparm > /dev/null 2>&1; then
	einfo "Backing up harddisks APM levels ..."
	declare -A hdparm_apms
	for hd in /dev/sd[a-z] /dev/hd[a-z]; do
		if [ "${hd}" = '/dev/hd[a-z]' ] || [ "${hd}" = '/dev/sd[a-z]' ]; then continue; fi
		hdparm_apms[${hd##*/}]="$(hdparm -B "${hd}" | awk '$1 == "APM_level" && $3 ~ "^[0-9]+$" { print $3; }')"
	done 2>/dev/null; unset hd
fi

amixer -q set Master mute

# Drop disk caches if there is more than 1GiB of them or if total memory is 2G or smaller.
# we don't really want to waste time writtin all the caches to disk.
if ! awk '$1 ~ /^(Cached|Buffers):$/ { cachebuffers += $2 }; $1 == "MemTotal:" { memtotal = int($2/1024) }; END { if (memtotal <= 2048) exit 1; if (int(cachebuffers/1024) > 1024) exit 1 }' /proc/meminfo; then
	einfo 'Dropping disk caches ...'
	echo 1 >/proc/sys/vm/drop_caches
fi
sleep 3
awk '/MemTotal:/ { mem_total = $2 }; /MemFree:/ {mem_free = $2 }; END { print ">>>", (mem_total - mem_free)/1024, "MB will be written to disk ..." }' /proc/meminfo

### Suspend to disk.
einfo "Suspending to disk ..."
#s2disk
echo disk > /sys/power/state

### After resume.
if [ -f '/usr/share/wicd/daemon/autoconnect.py' ]; then
	einfo 'Poking wicd to autoconnect.'
	command -v wicd-cli >/dev/null 2>&1 && wicd-cli --wireless --scan
	python2 /usr/share/wicd/daemon/autoconnect.py
fi

if command -v hdparm > /dev/null 2>&1; then
	for hd in "${!hdparm_apms[@]}"; do
        [ "${hdparm_apms[${hd}]}" ] || continue
		einfo "Setting back APM level on ${hd} to '${hdparm_apms[${hd}]}'."
		hdparm -B "${hdparm_apms[${hd}]}" "/dev/${hd}" > /dev/null 2>&1
	done
fi

if [ -f "/sys/devices/virtual/dmi/id/product_name" ] && [ "$(< /sys/devices/virtual/dmi/id/product_name)" = '1215N' ]; then
	einfo "Disabling Nvidia GPU ..."
	if [ -f /proc/acpi/call ] && [ -x /usr/share/acpi_call/asus1215n.sh ]; then
		/usr/share/acpi_call/asus1215n.sh off >/dev/null
	else
		echo "!!! Unable to disable Nvidia GPU."
	fi
fi

if command -v le_power >/dev/null 2>&1; then
	le_power auto
fi

if [ "${zram_swap}" = 'true' ]; then
	for device in "${!zram_swaps_prio[@]}"; do
		einfo "Enabling swap on '${device##*/}' with '${zram_swaps_prio[${device}]}' priority ..."
		mkswap "${device}" >/dev/null
		swapon "${device}" -p "${zram_swaps_prio[${device}]}"
	done
fi

