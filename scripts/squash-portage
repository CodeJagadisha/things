#!/bin/sh
# Portage tree in squashfs with aufs.

tree_path='/var/portage/tree'
storage_path='/var/portage'
compression='lzo'

einfo() { printf "\033[1;32m>>> \033[0m%s\n" "$*"; }
ewarn() { printf "\033[1;33m>>> \033[0m%s\n" "$*"; }
eerror() { printf "\033[1;31m>>> \033[0m%s\n" "$*"; }
die() { eerror "$@"; exit 1; }
run() { "$@" || die "Command '$@' failed."; }

new_squash() {
	run mksquashfs "${tree_path}/" "${storage_path}/tree.squashfs.new" -force-uid portage -force-gid portage -comp "${compression}" 
}

prepare_env() {
	# Test if there is support for loop mounts.
	if ! [ -c /dev/loop-control ]; then
		if modprobe loop 2>/dev/null; then
			attempts=0
			while true; do
				if [ "${attempts}" -ge '10' ]; then
					die "Something went wrong, /dev/loop-control were not created!"
				fi
				if ! [ -c /dev/loop-control ]; then
					attempts="$((attempts+1))"
					sleep 1
				else
					break
				fi
			done
		else
			die "Your kernel does not support loop devices. :<"
		fi
	fi
	if awk '$1 == "aufs" || $2 == "aufs" { exit 1 };' /proc/filesystems; then
		die "Your kernel does not support aufs!"
	fi
	if awk '$1 == "squashfs" || $2 == "squashfs" { exit 1 };' /proc/filesystems; then
		die "Your kernel does not support squashfs!"
	fi

	test -d "${storage_path}/tree.ro" || run mkdir "${storage_path}/tree.ro"
	test -d "${storage_path}/tree.rw" || run mkdir "${storage_path}/tree.rw"
}

mount_squashy() {
	einfo "Mounting squashfs 'tree.squashfs' to '${storage_path}/tree.ro' ..."
	run mount -t squashfs "${storage_path}/tree.squashfs" "${storage_path}/tree.ro" -o loop,ro
	einfo "Mounting aufs to '${tree_path}' ..."
	run mount -t aufs -o br="${storage_path}"/tree.rw=rw:"${storage_path}"/tree.ro=ro portage-aufs "${tree_path}"
	run chown portage:portage "${tree_path}"
}

unmount_squashy() {
	if mountpoint -q "${tree_path}"; then
		einfo "Unmounting '${tree_path}' ..."
		run umount "${tree_path}"
	fi
	
	if mountpoint -q "${storage_path}/tree.ro"; then
		einfo "Unmouting '${storage_path}/tree.ro' ..."
		run umount "${storage_path}/tree.ro"
	fi
}

case "$1" in
	update)
		if [ -e "${storage_path}/tree.squashfs.new" ]; then
			die "Image '${storage_path}/tree.squashfs.new' exist, do something about it."
		fi
		prepare_env
		new_squash
		unmount_squashy
		einfo "Moving 'tree.squashfs.new' to 'tree.squashfs' ..."
		mv "${storage_path}/tree.squashfs.new" "${storage_path}/tree.squashfs"
		einfo "Cleaning old tree.rw ..."
		rm -rf "${storage_path:-LOLWAT}/tree.rw"
		run mkdir "${storage_path:-LOLWAT}/tree.rw"
		mount_squashy
	;;
	mount)
		prepare_env
		mount_squashy
	;;
	unmount)
		unmount_squashy
	;;
	*)
		die "update, mount or unmount."
	;;
esac
